import random
import time
from datetime import datetime

from aiohttp.client_exceptions import ClientConnectorError
from loguru import logger
from vkbottle import API, EMPTY_KEYBOARD
from vkbottle.bot import Bot, Message
from vkbottle.dispatch.rules.base import CommandRule, FromUserRule

from config import CLUBPREF, TOKEN
from db import (
    create_tables,
    create_user,
    get_user,
    top_drink_users,
    update_drink_status
)
from keyboards import FORMAT_KBD, MAIN_KBD
from tools import labelers

bot = Bot(TOKEN)
bot.labeler.vbml_ignore_case = True
bot.labeler.auto_rules = [FromUserRule()]


async def handle_drink_command(user_id: int) -> str:
    """
    Handles "–ø–∏—Ç—å" command.
    """
    current_date = int(time.time())
    user = await get_user(user_id)

    drink: int = random.randint(200, 2000)
    total_drink = drink
    if user:
        if datetime.fromtimestamp(user[2]).date() == datetime.now().date():
            return "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–ø–∏—Ç—å' —Å–µ–≥–æ–¥–Ω—è."

        await update_drink_status(user_id, drink, current_date)
        total_drink += user[1]
    else:
        await create_user(user_id, drink, current_date)

    return f"–í—ã –≤—ã–ø–∏–ª–∏ {drink} –º–ª —Å–ø–µ—Ä–º—ã. –í—Å–µ–≥–æ –≤—ã –≤—ã–ø–∏–ª–∏ : {total_drink} –º–ª —Å–ø–µ—Ä–º—ã."


async def handle_count_command(user_id: int) -> str:
    """
    Handles "—Ä–∞–∑–º–µ—Ä –º–æ—è –∫—Ä—É–∂–∫–∞" command.
    """
    user = await get_user(user_id)
    if not user:
        return "–í—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–ø–∏—Ç—å'."

    return f"–í—Å–µ–≥–æ –≤—ã –≤—ã–ø–∏–ª–∏: {user[1]} –º–ª."


async def handle_top_command(api: API) -> str:
    """
    Handles "–ø–∏—Ç—å —Ç–æ–ø" command.
    """

    # Sort users by their ml in descending order
    top_users = await top_drink_users()
    top_users = top_users[:10]

    # Getting users' full names
    user_ids = [user[0] for user in top_users]
    user_names = await api.users.get(user_ids=user_ids)

    # Creating response
    response = "–æ–±—â–∏–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user in enumerate(top_users, 1):
        user_name = f"[id{user[0]}|{user_names[i - 1].first_name} {user_names[i - 1].last_name}]"
        response += f"{i}. {user_name}: {user[1]} –º–ª\n"

    return response


#
# Main bot handlers
#


@bot.on.message(text=(",–∫–ª–∞–≤–∞", "[club224599461|@ampersand_bot] –∫–ª–∞–≤–∞"))
async def kbd_handler(message: Message):
    await message.answer("–∫–ª–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", keyboard=MAIN_KBD)


@bot.on.message(text=(",—É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É", "[club224599461|@ampersand_bot] —É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É"))
@bot.on.message(payload={"cmd": "remove_kbd"})
async def remove_kbd_handler(message: Message):
    await message.answer("–∫–ª–∞–≤–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞", keyboard=EMPTY_KEYBOARD)


@bot.on.message(text=(",–ø–∏—Ç—å", "[club224599461|@ampersand_bot] –ø–∏—Ç—å"))
@bot.on.message(payload={"cmd": "drink"})
async def drink_handler(message: Message):
    if message.from_id < 1:
        # Bots not allowed!
        return

    response = await handle_drink_command(message.from_id)
    await message.answer(response)
    await message.answer(sticker_id=58258)


@bot.on.message(CommandRule("–ø–∏—Ç—å –∫—Ä—É–∂–∫–∞", [","], 0))
async def drink_count_handler(message: Message):
    response = await handle_count_command(message.from_id)
    await message.answer(response)


@bot.on.message(CommandRule("–ø–∏—Ç—å —Ç–æ–ø", [",", f"{CLUBPREF} "], 0))
@bot.on.message(payload={"cmd": "drink_top"})
async def top_handler(message: Message):
    response = await handle_top_command(message.ctx_api)
    await message.answer(response, disable_mentions=True)
    await message.answer(sticker_id=58261)


@bot.on.message(CommandRule("–ø–∏—Ç—å –∏–Ω—Ñ–æ", [","], 0))
@bot.on.message(payload={"cmd": "drink_info"})
async def kok_info_handler(_: Message):
    return (
        "–ú–æ–¥—É–ª—å –ø–∏—Ç—å –≤ –±–æ—Ç–µ ampersand"
        "\nver.1.0.0, stable"
        "\nDerfikop‚ù§Ô∏è,"
        "\nF1zzTao‚ù§Ô∏è"
        "\nampersand gang 4everüî´"
    )


@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –ø–∏—Ç—å", [","], 0))
@bot.on.message(payload={"cmd": "drink_help"})
async def kok_help_handler(_: Message):
    return "–∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è –ø–∏—Ç—å:\n–ø–∏—Ç—å, –ø–∏—Ç—å –∏–Ω—Ñ–æ,\n–ø–∏—Ç—å —Ç–æ–ø, –ø–∏—Ç—å –∫—Ä—É–∂–∫–∞"


@bot.on.message(text=(",—é–Ω–∏–∫—Å —Ç–∞–π–º", "[club224599461|@ampersand_bot] —é–Ω–∏–∫—Å —Ç–∞–π–º"))
@bot.on.message(payload={"cmd": "unix_time"})
async def unix_time_handler(message: Message):
    await message.answer("–ö–∞–∫–æ–π –≤–∏–¥ —é–Ω–∏–∫—Å —Ç–∞–π–º–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?", keyboard=FORMAT_KBD)


@bot.on.message(text=(f"{CLUBPREF} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"))
@bot.on.message(payload={"cmd": "unix_time_formatted"})
async def time_format_handler(message: Message):
    f_time = time.strftime("%X %x %Z")
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —é–Ω–∏–∫—Å –≤—Ä–µ–º—è :\n{f_time}")
    await message.answer(sticker_id=3130)


@bot.on.message(text=(f"{CLUBPREF} –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"))
@bot.on.message(payload={"cmd": "unix_time_unformatted"})
async def time_nonformat_handler(message: Message):
    nf_time = str(int(time.time()))
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–µ–æ–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —é–Ω–∏–∫—Å –≤—Ä–µ–º—è : {nf_time}")
    # TODO: Sticker below is not available (error 100)
    # await message.answer(sticker_id=3130)


@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –¥—Ä—É–≥–æ–µ", [","], 0))
async def help_misc_handler(_: Message):
    return (
        "–ê–ö–ê –º–æ–¥—É–ª—å –º—É–ª—å—Ç—É—Ç—É–ª,"
        "\n–ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è '–¥—Ä—É–≥–æ–µ':"
        "\n‚Ä¢—é–Ω–∏–∫—Å —Ç–∞–π–º"
        "\n‚Ä¢–∫–ª–∞–≤–∞"
        "\n‚Ä¢–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ü§î"
    )


@bot.on.message(CommandRule("–ø–æ–º–æ—â—å –º—É–ª—å—Ç–∏—Ç—É–ª", [","], 0))
async def help_multitool_handler(_: Message):
    return (
        "–º–æ–¥—É–ª—å –º—É–ª—å—Ç—É—Ç—É–ª,"
        "\n–ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è '–º—É–ª—å—Ç–∏—Ç—É–ª':"
        "\n‚Ä¢—é–Ω–∏–∫—Å —Ç–∞–π–º"
        "\n‚Ä¢–∫–ª–∞–≤–∞"
        "\n‚Ä¢–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ü§î"
    )


@bot.on.message(text=(",–ø–æ–º–æ—â—å", "[club224599461|@ampersand_bot] –ø–æ–º–æ—â—å"))
async def help_handler(_: Message):
    return (
        "–ø–æ–º–æ—â—å –±–æ—Ç–∞ –∞–º–ø–µ—Ä—Å–∞–Ω–¥[&]"
        "\n–ø–∏—à–∏ ,–ø–æ–º–æ—â—å <–∏–º—è_–º–æ–¥—É–ª—è> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–¥—É–ª–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
        "\n–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:"
        "\n‚Ä¢–ø–∏—Ç—å"
        "\n‚Ä¢–¥—Ä—É–≥–æ–µ(–º—É–ª—å—Ç–∏—Ç—É–ª)"
    )


@bot.error_handler.register_error_handler(ClientConnectorError)
async def no_internet_error_handler(e: ClientConnectorError):
    """
    No internet handler.
    The entire bot waits 15 seconds if there's no internet.
    """
    logger.warning(f"No internet connection: {e}")
    time.sleep(15)  # ? Should this be replaced with asyncio.sleep()?


if __name__ == "__main__":
    bot.loop_wrapper.on_startup.append(create_tables())

    for custom_labeler in labelers:
        bot.labeler.load(custom_labeler)

    logger.info("Starting bot")
    bot.run_forever()
